(use-modules (ice-9 rdelim))

(load "erf.scm")
(load "expm1.scm")
(load "phi.scm")
(load "normal-cdf-inverse.scm")
(load "gamma.scm")
(load "log-factorial.scm")

(define (loop)
    (let ((s (read-line)))
        (if (not (eof-object? s))
            (let* ((a (string-split s #\ ))
                   (f (car a))
                   (x (string->number (cadr a))))
                (cond
                    ((string=? f "erf")
                        (display (erf x)))
                    ((string=? f "expm1")
                        (display (expm1 x)))
                    ((string=? f "phi")
                        (display (phi x)))
                    ((string=? f "NormalCDFInverse")
                        (display (normal-cdf-inverse x)))
                    ((string=? f "Gamma")
                        (display (gamma x)))
                    ((string=? f "LogGamma")
                        (display (log-gamma x)))
                    ((string=? f "LogFactorial")
                        (display (log-factorial (inexact->exact (truncate x)))))
                    (else
                        (display "Unknown function: ")
                        (display f)
                        (newline)
                        (exit)))
                (newline)
                (force-output)
                (loop)))))

(loop)
